# -*- coding: utf-8 -*-
"""parkinson_disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LxjZO4QDCdJj2TLomxDlO09XX_U7GDCf
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

from imblearn.over_sampling import RandomOverSampler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.feature_selection import SelectKBest, chi2
from tqdm.notebook import tqdm
from sklearn import metrics
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression

import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
path="/content/drive/MyDrive/parkinsons data.csv"
df=pd.read_csv(path)
df.describe

df.shape

df.isnull().sum()

df.info()

df=df.drop('name',axis=1)

df.hist(figsize=(25,30));

!pip install scikit-learn

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x = df.drop(['status'],axis=1)
y = df['status']

X_train,X_test,y_train,y_test=train_test_split(x,y,shuffle=True)
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

!pip install plotly

import plotly.express as px
px.imshow(df.drop('status',axis=1).corr())

from sklearn import svm
from sklearn.metrics import accuracy_score
model1 = svm.SVC(kernel='rbf', gamma=1, C=10)
model1.fit(X_train, y_train)
y_pred = model1.predict(X_test)
test_data_accuracy = accuracy_score(y_test, y_pred)

print("Test accuracy:",test_data_accuracy*100)

model2=LogisticRegression()
model2.fit(X_train,y_train)
y_pred = model2.predict(X_test)
test_data_accuracy = accuracy_score(y_test, y_pred)

print("Test accuracy:",test_data_accuracy*100)

from sklearn.ensemble import VotingClassifier
model3 = VotingClassifier(estimators=[('svc', model1), ('logistic_regression', model2)], voting='hard')
model3.fit(X_train,y_train)
predictions = model3.predict(X_test)
test_data_accuracy = accuracy_score(y_test, predictions)
test_data_accuracy*100

from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import RandomForestClassifier
model4 = BaggingClassifier(base_estimator=RandomForestClassifier(), n_estimators=10)
model4.fit(X_train, y_train)
predictions = model4.predict(X_test)
test_data_accuracy = accuracy_score(y_test, predictions)
test_data_accuracy*100

from sklearn.ensemble import AdaBoostClassifier
model5 = AdaBoostClassifier(n_estimators=50)
model5.fit(X_train, y_train)
predictions = model5.predict(X_test)
test_data_accuracy = accuracy_score(y_test, predictions)
test_data_accuracy*100

from sklearn.ensemble import StackingClassifier
estimators = [('svc', model1), ('logistic_regression', model2)]
meta_estimator = LogisticRegression()
model6 = StackingClassifier(estimators=estimators, final_estimator=meta_estimator)
model6.fit(X_train, y_train)
predictions = model6.predict(X_test)
test_data_accuracy = accuracy_score(y_test, predictions)
test_data_accuracy*100

from sklearn.ensemble import StackingClassifier
estimators = [('svc', model1), ('logistic_regression', model2)]
meta_estimator = svm.SVC()
model7 = StackingClassifier(estimators=estimators, final_estimator=meta_estimator)
model7.fit(X_train, y_train)
predictions = model7.predict(X_test)
test_data_accuracy = accuracy_score(y_test, predictions)
test_data_accuracy*100